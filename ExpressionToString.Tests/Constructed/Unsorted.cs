using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using Xunit;
using static ExpressionToString.Tests.Globals;
using static ExpressionToString.Tests.Runners;
using static System.Linq.Expressions.Expression;

namespace ExpressionToString.Tests.Constructed {
    [Trait("Source", "Autogenerated")]
    public class Unsorted {
        readonly bool @bool;
        readonly CallSiteBinder callSiteBinder;
        readonly CatchBlock[] catchBlockArray;
        readonly ConstructorInfo constructorInfo;
        readonly ElementInit[] elementInitArray;
        readonly Expression expression;
        readonly Expression[] expressionArray;
        readonly ExpressionType expressionType;
        readonly FieldInfo fieldInfo;
        readonly GotoExpressionKind gotoExpressionKind;
        readonly Guid guid;
        readonly IEnumerable<CatchBlock> iEnumerableOfCatchBlock;
        readonly IEnumerable<Expression> iEnumerableOfExpression;
        readonly IEnumerable<ParameterExpression> iEnumerableOfParameterExpression;
        readonly int @int;
        readonly LabelTarget labelTarget;
        readonly LambdaExpression lambdaExpression;
        readonly MemberBinding[] memberBindingArray;
        readonly MemberInfo memberInfo;
        readonly MemberInfo[] memberInfoArray;
        readonly MethodInfo methodInfo;
        readonly NewExpression newExpression;
        readonly object @object;
        readonly ParameterExpression parameterExpression;
        readonly ParameterExpression[] parameterExpressionArray;
        readonly PropertyInfo propertyInfo;
        readonly string @string;
        readonly SwitchCase[] switchCaseArray;
        readonly SymbolDocumentInfo symbolDocumentInfo;
        readonly Type type;
        readonly Type[] typeArray;

        #region BinaryExpression

        [Fact]
        public void Add_Test() =>
            BuildAssert(
                Add(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Add_1_Test() =>
            BuildAssert(
                Add(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AddAssign_Test() =>
            BuildAssert(
                AddAssign(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AddAssign_1_Test() =>
            BuildAssert(
                AddAssign(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AddAssign_2_Test() =>
            BuildAssert(
                AddAssign(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AddAssignChecked_Test() =>
            BuildAssert(
                AddAssignChecked(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AddAssignChecked_1_Test() =>
            BuildAssert(
                AddAssignChecked(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AddAssignChecked_2_Test() =>
            BuildAssert(
                AddAssignChecked(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AddChecked_Test() =>
            BuildAssert(
                AddChecked(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AddChecked_1_Test() =>
            BuildAssert(
                AddChecked(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void And_Test() =>
            BuildAssert(
                And(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void And_1_Test() =>
            BuildAssert(
                And(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AndAlso_Test() =>
            BuildAssert(
                AndAlso(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AndAlso_1_Test() =>
            BuildAssert(
                AndAlso(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AndAssign_Test() =>
            BuildAssert(
                AndAssign(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AndAssign_1_Test() =>
            BuildAssert(
                AndAssign(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void AndAssign_2_Test() =>
            BuildAssert(
                AndAssign(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ArrayIndex_Test() =>
            BuildAssert(
                ArrayIndex(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Assign_Test() =>
            BuildAssert(
                Assign(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Coalesce_Test() =>
            BuildAssert(
                Coalesce(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Coalesce_1_Test() =>
            BuildAssert(
                Coalesce(expression, expression, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Divide_Test() =>
            BuildAssert(
                Divide(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Divide_1_Test() =>
            BuildAssert(
                Divide(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void DivideAssign_Test() =>
            BuildAssert(
                DivideAssign(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void DivideAssign_1_Test() =>
            BuildAssert(
                DivideAssign(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void DivideAssign_2_Test() =>
            BuildAssert(
                DivideAssign(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Equal_Test() =>
            BuildAssert(
                Equal(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Equal_1_Test() =>
            BuildAssert(
                Equal(expression, expression, @bool, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ExclusiveOr_Test() =>
            BuildAssert(
                ExclusiveOr(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ExclusiveOr_1_Test() =>
            BuildAssert(
                ExclusiveOr(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ExclusiveOrAssign_Test() =>
            BuildAssert(
                ExclusiveOrAssign(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ExclusiveOrAssign_1_Test() =>
            BuildAssert(
                ExclusiveOrAssign(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ExclusiveOrAssign_2_Test() =>
            BuildAssert(
                ExclusiveOrAssign(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void GreaterThan_Test() =>
            BuildAssert(
                GreaterThan(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void GreaterThan_1_Test() =>
            BuildAssert(
                GreaterThan(expression, expression, @bool, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void GreaterThanOrEqual_Test() =>
            BuildAssert(
                GreaterThanOrEqual(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void GreaterThanOrEqual_1_Test() =>
            BuildAssert(
                GreaterThanOrEqual(expression, expression, @bool, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void LeftShift_Test() =>
            BuildAssert(
                LeftShift(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void LeftShift_1_Test() =>
            BuildAssert(
                LeftShift(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void LeftShiftAssign_Test() =>
            BuildAssert(
                LeftShiftAssign(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void LeftShiftAssign_1_Test() =>
            BuildAssert(
                LeftShiftAssign(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void LeftShiftAssign_2_Test() =>
            BuildAssert(
                LeftShiftAssign(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void LessThan_Test() =>
            BuildAssert(
                LessThan(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void LessThan_1_Test() =>
            BuildAssert(
                LessThan(expression, expression, @bool, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void LessThanOrEqual_Test() =>
            BuildAssert(
                LessThanOrEqual(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void LessThanOrEqual_1_Test() =>
            BuildAssert(
                LessThanOrEqual(expression, expression, @bool, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeBinary_Test() =>
            BuildAssert(
                MakeBinary(expressionType, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeBinary_1_Test() =>
            BuildAssert(
                MakeBinary(expressionType, expression, expression, @bool, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeBinary_2_Test() =>
            BuildAssert(
                MakeBinary(expressionType, expression, expression, @bool, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Modulo_Test() =>
            BuildAssert(
                Modulo(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Modulo_1_Test() =>
            BuildAssert(
                Modulo(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ModuloAssign_Test() =>
            BuildAssert(
                ModuloAssign(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ModuloAssign_1_Test() =>
            BuildAssert(
                ModuloAssign(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ModuloAssign_2_Test() =>
            BuildAssert(
                ModuloAssign(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Multiply_Test() =>
            BuildAssert(
                Multiply(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Multiply_1_Test() =>
            BuildAssert(
                Multiply(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MultiplyAssign_Test() =>
            BuildAssert(
                MultiplyAssign(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MultiplyAssign_1_Test() =>
            BuildAssert(
                MultiplyAssign(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MultiplyAssign_2_Test() =>
            BuildAssert(
                MultiplyAssign(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MultiplyAssignChecked_Test() =>
            BuildAssert(
                MultiplyAssignChecked(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MultiplyAssignChecked_1_Test() =>
            BuildAssert(
                MultiplyAssignChecked(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MultiplyAssignChecked_2_Test() =>
            BuildAssert(
                MultiplyAssignChecked(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MultiplyChecked_Test() =>
            BuildAssert(
                MultiplyChecked(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MultiplyChecked_1_Test() =>
            BuildAssert(
                MultiplyChecked(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void NotEqual_Test() =>
            BuildAssert(
                NotEqual(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void NotEqual_1_Test() =>
            BuildAssert(
                NotEqual(expression, expression, @bool, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Or_Test() =>
            BuildAssert(
                Or(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Or_1_Test() =>
            BuildAssert(
                Or(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void OrAssign_Test() =>
            BuildAssert(
                OrAssign(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void OrAssign_1_Test() =>
            BuildAssert(
                OrAssign(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void OrAssign_2_Test() =>
            BuildAssert(
                OrAssign(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void OrElse_Test() =>
            BuildAssert(
                OrElse(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void OrElse_1_Test() =>
            BuildAssert(
                OrElse(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Power_Test() =>
            BuildAssert(
                Power(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Power_1_Test() =>
            BuildAssert(
                Power(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void PowerAssign_Test() =>
            BuildAssert(
                PowerAssign(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void PowerAssign_1_Test() =>
            BuildAssert(
                PowerAssign(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void PowerAssign_2_Test() =>
            BuildAssert(
                PowerAssign(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ReferenceEqual_Test() =>
            BuildAssert(
                ReferenceEqual(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ReferenceNotEqual_Test() =>
            BuildAssert(
                ReferenceNotEqual(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void RightShift_Test() =>
            BuildAssert(
                RightShift(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void RightShift_1_Test() =>
            BuildAssert(
                RightShift(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void RightShiftAssign_Test() =>
            BuildAssert(
                RightShiftAssign(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void RightShiftAssign_1_Test() =>
            BuildAssert(
                RightShiftAssign(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void RightShiftAssign_2_Test() =>
            BuildAssert(
                RightShiftAssign(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Subtract_Test() =>
            BuildAssert(
                Subtract(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Subtract_1_Test() =>
            BuildAssert(
                Subtract(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void SubtractAssign_Test() =>
            BuildAssert(
                SubtractAssign(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void SubtractAssign_1_Test() =>
            BuildAssert(
                SubtractAssign(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void SubtractAssign_2_Test() =>
            BuildAssert(
                SubtractAssign(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void SubtractAssignChecked_Test() =>
            BuildAssert(
                SubtractAssignChecked(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void SubtractAssignChecked_1_Test() =>
            BuildAssert(
                SubtractAssignChecked(expression, expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void SubtractAssignChecked_2_Test() =>
            BuildAssert(
                SubtractAssignChecked(expression, expression, methodInfo, lambdaExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void SubtractChecked_Test() =>
            BuildAssert(
                SubtractChecked(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void SubtractChecked_1_Test() =>
            BuildAssert(
                SubtractChecked(expression, expression, methodInfo),
                "",
                ""
            );

        #endregion

        #region BlockExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Block_Test() =>
            BuildAssert(
                Block(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Block_1_Test() =>
            BuildAssert(
                Block(expression, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Block_2_Test() =>
            BuildAssert(
                Block(expression, expression, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Block_3_Test() =>
            BuildAssert(
                Block(expression, expression, expression, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Block_4_Test() =>
            BuildAssert(
                Block(expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Block_5_Test() =>
            BuildAssert(
                Block(type, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Block_6_Test() =>
            BuildAssert(
                Block(iEnumerableOfParameterExpression, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Block_7_Test() =>
            BuildAssert(
                Block(type, iEnumerableOfParameterExpression, expressionArray),
                "",
                ""
            );

        #endregion

        #region bool

        [Fact(Skip = "Autogenerated tests")]
        public void TryGetActionType_Test() {
            Type type1;
            BuildAssert(
                TryGetActionType(typeArray, out type1),
                "",
                ""
            );
            //TODO inspect type1
        }

        [Fact(Skip = "Autogenerated tests")]
        public void TryGetFuncType_Test() {
            Type type1;
            BuildAssert(
                TryGetFuncType(typeArray, out type1),
                "",
                ""
            );
            //TODO inspect type1
        }

        #endregion

        #region CatchBlock

        [Fact(Skip = "Autogenerated tests")]
        public void Catch_Test() =>
            BuildAssert(
                Catch(type, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Catch_1_Test() =>
            BuildAssert(
                Catch(parameterExpression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Catch_2_Test() =>
            BuildAssert(
                Catch(type, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Catch_3_Test() =>
            BuildAssert(
                Catch(parameterExpression, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeCatchBlock_Test() =>
            BuildAssert(
                MakeCatchBlock(type, parameterExpression, expression, expression),
                "",
                ""
            );

        #endregion

        #region ConditionalExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Condition_Test() =>
            BuildAssert(
                Condition(expression, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Condition_1_Test() =>
            BuildAssert(
                Condition(expression, expression, expression, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void IfThen_Test() =>
            BuildAssert(
                IfThen(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void IfThenElse_Test() =>
            BuildAssert(
                IfThenElse(expression, expression, expression),
                "",
                ""
            );

        #endregion

        #region ConstantExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Constant_Test() =>
            BuildAssert(
                Constant(@object),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Constant_1_Test() =>
            BuildAssert(
                Constant(@object, type),
                "",
                ""
            );

        #endregion

        #region DebugInfoExpression

        [Fact(Skip = "Autogenerated tests")]
        public void ClearDebugInfo_Test() =>
            BuildAssert(
                ClearDebugInfo(symbolDocumentInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void DebugInfo_Test() =>
            BuildAssert(
                DebugInfo(symbolDocumentInfo, @int, @int, @int, @int),
                "",
                ""
            );

        #endregion

        #region DefaultExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Default_Test() =>
            BuildAssert(
                Default(type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Empty_Test() =>
            BuildAssert(
                Empty(),
                "",
                ""
            );

        #endregion

        #region DynamicExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Dynamic_Test() =>
            BuildAssert(
                Dynamic(callSiteBinder, type, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Dynamic_1_Test() =>
            BuildAssert(
                Dynamic(callSiteBinder, type, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Dynamic_2_Test() =>
            BuildAssert(
                Dynamic(callSiteBinder, type, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Dynamic_3_Test() =>
            BuildAssert(
                Dynamic(callSiteBinder, type, expression, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Dynamic_4_Test() =>
            BuildAssert(
                Dynamic(callSiteBinder, type, expression, expression, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeDynamic_Test() =>
            BuildAssert(
                MakeDynamic(type, callSiteBinder, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeDynamic_1_Test() =>
            BuildAssert(
                MakeDynamic(type, callSiteBinder, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeDynamic_2_Test() =>
            BuildAssert(
                MakeDynamic(type, callSiteBinder, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeDynamic_3_Test() =>
            BuildAssert(
                MakeDynamic(type, callSiteBinder, expression, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeDynamic_4_Test() =>
            BuildAssert(
                MakeDynamic(type, callSiteBinder, expression, expression, expression, expression),
                "",
                ""
            );

        #endregion

        #region ElementInit

        [Fact(Skip = "Autogenerated tests")]
        public void ElementInit_Test() =>
            BuildAssert(
                ElementInit(methodInfo, expressionArray),
                "",
                ""
            );

        #endregion

        #region Expression<TDelegate>

        #endregion

        #region Expression<TDelegate>

        #endregion

        #region Expression<TDelegate>

        #endregion

        #region Expression<TDelegate>

        #endregion

        #region Expression<TDelegate>

        #endregion

        #region Expression<TDelegate>

        #endregion

        #region GotoExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Break_Test() =>
            BuildAssert(
                Break(labelTarget),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Break_1_Test() =>
            BuildAssert(
                Break(labelTarget, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Break_2_Test() =>
            BuildAssert(
                Break(labelTarget, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Break_3_Test() =>
            BuildAssert(
                Break(labelTarget, expression, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Continue_Test() =>
            BuildAssert(
                Continue(labelTarget),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Continue_1_Test() =>
            BuildAssert(
                Continue(labelTarget, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Goto_Test() =>
            BuildAssert(
                Goto(labelTarget),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Goto_1_Test() =>
            BuildAssert(
                Goto(labelTarget, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Goto_2_Test() =>
            BuildAssert(
                Goto(labelTarget, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Goto_3_Test() =>
            BuildAssert(
                Goto(labelTarget, expression, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeGoto_Test() =>
            BuildAssert(
                MakeGoto(gotoExpressionKind, labelTarget, expression, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Return_Test() =>
            BuildAssert(
                Return(labelTarget),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Return_1_Test() =>
            BuildAssert(
                Return(labelTarget, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Return_2_Test() =>
            BuildAssert(
                Return(labelTarget, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Return_3_Test() =>
            BuildAssert(
                Return(labelTarget, expression, type),
                "",
                ""
            );

        #endregion

        #region IndexExpression

        [Fact(Skip = "Autogenerated tests")]
        public void ArrayAccess_Test() =>
            BuildAssert(
                ArrayAccess(expression, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeIndex_Test() =>
            BuildAssert(
                MakeIndex(expression, propertyInfo, iEnumerableOfExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Property_Test() =>
            BuildAssert(
                Property(expression, @string, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Property_1_Test() =>
            BuildAssert(
                Property(expression, propertyInfo, expressionArray),
                "",
                ""
            );

        #endregion

        #region InvocationExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Invoke_Test() =>
            BuildAssert(
                Invoke(expression, expressionArray),
                "",
                ""
            );

        #endregion

        #region LabelExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Label_Test() =>
            BuildAssert(
                Label(labelTarget),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Label_1_Test() =>
            BuildAssert(
                Label(labelTarget, expression),
                "",
                ""
            );

        #endregion

        #region LabelTarget

        [Fact(Skip = "Autogenerated tests")]
        public void Label_2_Test() =>
            BuildAssert(
                Label(),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Label_3_Test() =>
            BuildAssert(
                Label(@string),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Label_4_Test() =>
            BuildAssert(
                Label(type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Label_5_Test() =>
            BuildAssert(
                Label(type, @string),
                "",
                ""
            );

        #endregion

        #region LambdaExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Lambda_Test() =>
            BuildAssert(
                Lambda(expression, parameterExpressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Lambda_1_Test() =>
            BuildAssert(
                Lambda(expression, @bool, parameterExpressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Lambda_2_Test() =>
            BuildAssert(
                Lambda(type, expression, parameterExpressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Lambda_3_Test() =>
            BuildAssert(
                Lambda(type, expression, @bool, parameterExpressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Lambda_4_Test() =>
            BuildAssert(
                Lambda(expression, @string, iEnumerableOfParameterExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Lambda_5_Test() =>
            BuildAssert(
                Lambda(expression, @string, @bool, iEnumerableOfParameterExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Lambda_6_Test() =>
            BuildAssert(
                Lambda(type, expression, @string, iEnumerableOfParameterExpression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Lambda_7_Test() =>
            BuildAssert(
                Lambda(type, expression, @string, @bool, iEnumerableOfParameterExpression),
                "",
                ""
            );

        #endregion

        #region ListInitExpression

        [Fact(Skip = "Autogenerated tests")]
        public void ListInit_Test() =>
            BuildAssert(
                ListInit(newExpression, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ListInit_1_Test() =>
            BuildAssert(
                ListInit(newExpression, methodInfo, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ListInit_2_Test() =>
            BuildAssert(
                ListInit(newExpression, elementInitArray),
                "",
                ""
            );

        #endregion

        #region LoopExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Loop_Test() =>
            BuildAssert(
                Loop(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Loop_1_Test() =>
            BuildAssert(
                Loop(expression, labelTarget),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Loop_2_Test() =>
            BuildAssert(
                Loop(expression, labelTarget, labelTarget),
                "",
                ""
            );

        #endregion

        #region MemberAssignment

        [Fact(Skip = "Autogenerated tests")]
        public void Bind_Test() =>
            BuildAssert(
                Bind(memberInfo, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Bind_1_Test() =>
            BuildAssert(
                Bind(methodInfo, expression),
                "",
                ""
            );

        #endregion

        #region MemberExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Field_Test() =>
            BuildAssert(
                Field(expression, fieldInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Field_1_Test() =>
            BuildAssert(
                Field(expression, @string),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Field_2_Test() =>
            BuildAssert(
                Field(expression, type, @string),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeMemberAccess_Test() =>
            BuildAssert(
                MakeMemberAccess(expression, memberInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Property_2_Test() =>
            BuildAssert(
                Property(expression, @string),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Property_3_Test() =>
            BuildAssert(
                Property(expression, type, @string),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Property_4_Test() =>
            BuildAssert(
                Property(expression, propertyInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Property_5_Test() =>
            BuildAssert(
                Property(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void PropertyOrField_Test() =>
            BuildAssert(
                PropertyOrField(expression, @string),
                "",
                ""
            );

        #endregion

        #region MemberInitExpression

        [Fact(Skip = "Autogenerated tests")]
        public void MemberInit_Test() =>
            BuildAssert(
                MemberInit(newExpression, memberBindingArray),
                "",
                ""
            );

        #endregion

        #region MemberListBinding

        [Fact(Skip = "Autogenerated tests")]
        public void ListBind_Test() =>
            BuildAssert(
                ListBind(memberInfo, elementInitArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ListBind_1_Test() =>
            BuildAssert(
                ListBind(methodInfo, elementInitArray),
                "",
                ""
            );

        #endregion

        #region MemberMemberBinding

        [Fact(Skip = "Autogenerated tests")]
        public void MemberBind_Test() =>
            BuildAssert(
                MemberBind(memberInfo, memberBindingArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MemberBind_1_Test() =>
            BuildAssert(
                MemberBind(methodInfo, memberBindingArray),
                "",
                ""
            );

        #endregion

        #region MethodCallExpression

        [Fact(Skip = "Autogenerated tests")]
        public void ArrayIndex_1_Test() =>
            BuildAssert(
                ArrayIndex(expression, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Call_Test() =>
            BuildAssert(
                Call(methodInfo, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Call_1_Test() =>
            BuildAssert(
                Call(methodInfo, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Call_2_Test() =>
            BuildAssert(
                Call(methodInfo, expression, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Call_3_Test() =>
            BuildAssert(
                Call(methodInfo, expression, expression, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Call_4_Test() =>
            BuildAssert(
                Call(methodInfo, expression, expression, expression, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Call_5_Test() =>
            BuildAssert(
                Call(methodInfo, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Call_6_Test() =>
            BuildAssert(
                Call(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Call_7_Test() =>
            BuildAssert(
                Call(expression, methodInfo, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Call_8_Test() =>
            BuildAssert(
                Call(expression, methodInfo, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Call_9_Test() =>
            BuildAssert(
                Call(expression, methodInfo, expression, expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Call_10_Test() =>
            BuildAssert(
                Call(expression, @string, typeArray, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Call_11_Test() =>
            BuildAssert(
                Call(type, @string, typeArray, expressionArray),
                "",
                ""
            );

        #endregion

        #region NewArrayExpression

        [Fact(Skip = "Autogenerated tests")]
        public void NewArrayBounds_Test() =>
            BuildAssert(
                NewArrayBounds(type, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void NewArrayInit_Test() =>
            BuildAssert(
                NewArrayInit(type, expressionArray),
                "",
                ""
            );

        #endregion

        #region NewExpression

        [Fact(Skip = "Autogenerated tests")]
        public void New_Test() =>
            BuildAssert(
                New(constructorInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void New_1_Test() =>
            BuildAssert(
                New(constructorInfo, expressionArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void New_2_Test() =>
            BuildAssert(
                New(constructorInfo, iEnumerableOfExpression, memberInfoArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void New_3_Test() =>
            BuildAssert(
                New(type),
                "",
                ""
            );

        #endregion

        #region ParameterExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Parameter_Test() =>
            BuildAssert(
                Parameter(type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Parameter_1_Test() =>
            BuildAssert(
                Parameter(type, @string),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Variable_Test() =>
            BuildAssert(
                Variable(type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Variable_1_Test() =>
            BuildAssert(
                Variable(type, @string),
                "",
                ""
            );

        #endregion

        #region RuntimeVariablesExpression

        [Fact(Skip = "Autogenerated tests")]
        public void RuntimeVariables_Test() =>
            BuildAssert(
                RuntimeVariables(parameterExpressionArray),
                "",
                ""
            );

        #endregion

        #region SwitchCase

        [Fact(Skip = "Autogenerated tests")]
        public void SwitchCase_Test() =>
            BuildAssert(
                SwitchCase(expression, expressionArray),
                "",
                ""
            );

        #endregion

        #region SwitchExpression

        [Fact(Skip = "Autogenerated tests")]
        public void Switch_Test() =>
            BuildAssert(
                Switch(expression, switchCaseArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Switch_1_Test() =>
            BuildAssert(
                Switch(expression, expression, switchCaseArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Switch_2_Test() =>
            BuildAssert(
                Switch(expression, expression, methodInfo, switchCaseArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Switch_3_Test() =>
            BuildAssert(
                Switch(type, expression, expression, methodInfo, switchCaseArray),
                "",
                ""
            );

        #endregion

        #region SymbolDocumentInfo

        [Fact(Skip = "Autogenerated tests")]
        public void SymbolDocument_Test() =>
            BuildAssert(
                SymbolDocument(@string),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void SymbolDocument_1_Test() =>
            BuildAssert(
                SymbolDocument(@string, guid),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void SymbolDocument_2_Test() =>
            BuildAssert(
                SymbolDocument(@string, guid, guid),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void SymbolDocument_3_Test() =>
            BuildAssert(
                SymbolDocument(@string, guid, guid, guid),
                "",
                ""
            );

        #endregion

        #region TryExpression

        [Fact(Skip = "Autogenerated tests")]
        public void MakeTry_Test() =>
            BuildAssert(
                MakeTry(type, expression, expression, expression, iEnumerableOfCatchBlock),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void TryCatch_Test() =>
            BuildAssert(
                TryCatch(expression, catchBlockArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void TryCatchFinally_Test() =>
            BuildAssert(
                TryCatchFinally(expression, expression, catchBlockArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void TryFault_Test() =>
            BuildAssert(
                TryFault(expression, expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void TryFinally_Test() =>
            BuildAssert(
                TryFinally(expression, expression),
                "",
                ""
            );

        #endregion

        #region Type

        [Fact(Skip = "Autogenerated tests")]
        public void GetActionType_Test() =>
            BuildAssert(
                GetActionType(typeArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void GetDelegateType_Test() =>
            BuildAssert(
                GetDelegateType(typeArray),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void GetFuncType_Test() =>
            BuildAssert(
                GetFuncType(typeArray),
                "",
                ""
            );

        #endregion

        #region TypeBinaryExpression

        [Fact(Skip = "Autogenerated tests")]
        public void TypeEqual_Test() =>
            BuildAssert(
                TypeEqual(expression, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void TypeIs_Test() =>
            BuildAssert(
                TypeIs(expression, type),
                "",
                ""
            );

        #endregion

        #region UnaryExpression

        [Fact(Skip = "Autogenerated tests")]
        public void ArrayLength_Test() =>
            BuildAssert(
                ArrayLength(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Convert_Test() =>
            BuildAssert(
                Convert(expression, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Convert_1_Test() =>
            BuildAssert(
                Convert(expression, type, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ConvertChecked_Test() =>
            BuildAssert(
                ConvertChecked(expression, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void ConvertChecked_1_Test() =>
            BuildAssert(
                ConvertChecked(expression, type, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Decrement_Test() =>
            BuildAssert(
                Decrement(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Decrement_1_Test() =>
            BuildAssert(
                Decrement(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Increment_Test() =>
            BuildAssert(
                Increment(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Increment_1_Test() =>
            BuildAssert(
                Increment(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void IsFalse_Test() =>
            BuildAssert(
                IsFalse(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void IsFalse_1_Test() =>
            BuildAssert(
                IsFalse(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void IsTrue_Test() =>
            BuildAssert(
                IsTrue(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void IsTrue_1_Test() =>
            BuildAssert(
                IsTrue(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeUnary_Test() =>
            BuildAssert(
                MakeUnary(expressionType, expression, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void MakeUnary_1_Test() =>
            BuildAssert(
                MakeUnary(expressionType, expression, type, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Negate_Test() =>
            BuildAssert(
                Negate(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Negate_1_Test() =>
            BuildAssert(
                Negate(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void NegateChecked_Test() =>
            BuildAssert(
                NegateChecked(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void NegateChecked_1_Test() =>
            BuildAssert(
                NegateChecked(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Not_Test() =>
            BuildAssert(
                Not(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Not_1_Test() =>
            BuildAssert(
                Not(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void OnesComplement_Test() =>
            BuildAssert(
                OnesComplement(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void OnesComplement_1_Test() =>
            BuildAssert(
                OnesComplement(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void PostDecrementAssign_Test() =>
            BuildAssert(
                PostDecrementAssign(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void PostDecrementAssign_1_Test() =>
            BuildAssert(
                PostDecrementAssign(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void PostIncrementAssign_Test() =>
            BuildAssert(
                PostIncrementAssign(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void PostIncrementAssign_1_Test() =>
            BuildAssert(
                PostIncrementAssign(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void PreDecrementAssign_Test() =>
            BuildAssert(
                PreDecrementAssign(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void PreDecrementAssign_1_Test() =>
            BuildAssert(
                PreDecrementAssign(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void PreIncrementAssign_Test() =>
            BuildAssert(
                PreIncrementAssign(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void PreIncrementAssign_1_Test() =>
            BuildAssert(
                PreIncrementAssign(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Quote_Test() =>
            BuildAssert(
                Quote(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Rethrow_Test() =>
            BuildAssert(
                Rethrow(),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Rethrow_1_Test() =>
            BuildAssert(
                Rethrow(type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Throw_Test() =>
            BuildAssert(
                Throw(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Throw_1_Test() =>
            BuildAssert(
                Throw(expression, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void TypeAs_Test() =>
            BuildAssert(
                TypeAs(expression, type),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void UnaryPlus_Test() =>
            BuildAssert(
                UnaryPlus(expression),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void UnaryPlus_1_Test() =>
            BuildAssert(
                UnaryPlus(expression, methodInfo),
                "",
                ""
            );

        [Fact(Skip = "Autogenerated tests")]
        public void Unbox_Test() =>
            BuildAssert(
                Unbox(expression, type),
                "",
                ""
            );

        #endregion

    }
}
